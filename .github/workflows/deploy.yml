name: Deploy to Lambda

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Load Secrets from 1Password
        id: load_secrets
        uses: 1password/load-secrets-action@v3
        with:
          op-cli-version: "v2.24.0"
        env:
          OP_SERVICE_ACCOUNT_TOKEN: ${{ secrets.OP_SERVICE_ACCOUNT_TOKEN }}
          API_ENDPOINT: op://Service Account Vault/VassistantApiEndpoint/credential
          AWS_ROLE_TO_ASSUME: op://Service Account Vault/IAM Role DeployVassistant/credential
          DOMAIN_NAME: op://Service Account Vault/VassistantDomainName/credential
          HOSTED_ZONE: op://Service Account Vault/VassistantHostedZone/credential
          NEXT_PUBLIC_USER_POOL_ID: op://Service Account Vault/VassistantUserPoolId/credential
          NEXT_PUBLIC_USER_POOL_CLIENT_ID: op://Service Account Vault/VassistantUserPoolClientId/credential

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ steps.load_secrets.outputs.AWS_ROLE_TO_ASSUME }}
          aws-region: us-east-1

      - name: Install dependencies
        run: npm install

      - name: Build
        run: npm run build
        env:
          NEXT_PUBLIC_USER_POOL_ID: ${{ steps.load_secrets.outputs.NEXT_PUBLIC_USER_POOL_ID }}
          NEXT_PUBLIC_USER_POOL_CLIENT_ID: ${{ steps.load_secrets.outputs.NEXT_PUBLIC_USER_POOL_CLIENT_ID }}

      - name: Deploy with SST and capture output
        id: deploy
        run: npm run deploy -- --stage prod &> deploy_output.txt
        env:
          API_ENDPOINT: ${{ steps.load_secrets.outputs.API_ENDPOINT }}
          DOMAIN_NAME: ${{ steps.load_secrets.outputs.DOMAIN_NAME }}
          HOSTED_ZONE: ${{ steps.load_secrets.outputs.HOSTED_ZONE }}
          NEXT_PUBLIC_USER_POOL_ID: ${{ steps.load_secrets.outputs.NEXT_PUBLIC_USER_POOL_ID }}
          NEXT_PUBLIC_USER_POOL_CLIENT_ID: ${{ steps.load_secrets.outputs.NEXT_PUBLIC_USER_POOL_CLIENT_ID }}

      - name: Mask sensitive output
        run: |
          output=$(cat deploy_output.txt)
          site_url=$(echo "$output" | grep 'SiteUrl' | awk '{print $2}')
          account_id_arn=$(echo "$output" | grep -oP 'arn:aws:iam::\K[0-9]+' | head -n 1)
          account_id_direct=$(echo "$output" | grep 'Account:' | awk '{print $2}')
          if [[ ! -z "$site_url" ]]; then
            echo "::add-mask::$site_url"
          fi
          if [[ ! -z "$account_id_arn" ]]; then
            echo "::add-mask::$account_id_arn"
          fi
          if [[ ! -z "$account_id_direct" ]]; then
            echo "::add-mask::$account_id_direct"
          fi
          echo "Deployment output:"
          cat deploy_output.txt

      - name: Clean up temporary file
        if: always()
        run: rm deploy_output.txt
